using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Problem_12
{

    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    /// 1: 1
    /// 3: 1,3
    /// 6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// Answer: 76576500
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            int runningTotal = 0;
            int n = 1;
            bool found = false;

            while (found == false)
            {
                runningTotal += n; //Creates new triangle numbers;
                int numOfFactors = FindNumberOfFactors(runningTotal);
                if (numOfFactors > 500) { found = true; }
                n++;
            }
            stopwatch.Stop();
            Console.WriteLine("Triangle number that has over 500 divisors: {0}", runningTotal);
            Console.WriteLine("Time taken: {0}ms", stopwatch.ElapsedMilliseconds);
            Console.ReadLine();
        }

        private static int FindNumberOfFactors(int num)
        {
            int count = 0;
            List<int> factors = new List<int>();
            for (int factor = 1; factor * factor <= num; factor++)
            {
                if ((num % factor).Equals(0))
                {
                    factors.Add(factor);
                    if (factor != num / factor)
                    {
                        factors.Add(num / factor);
                    }
                    count += 2;
                }
            }        

            return count;
        }
    }
}
